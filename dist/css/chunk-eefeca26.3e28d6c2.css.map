{"version":3,"sources":["webpack:///src/assets/styles/_reset.scss","webpack:///src/components/PostSlides.vue","webpack:///src/assets/styles/_rem.scss","webpack:///node_modules/sass-mq/_mq.scss","webpack:///src/assets/styles/index.scss","webpack:///src/components/PostsItem.vue","webpack:///src/components/PostsList.vue","webpack:///src/assets/styles/_globals.scss","webpack:///src/components/PostItem.vue"],"names":[],"mappings":"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","file":"chunk-eefeca26.3e28d6c2.css","sourcesContent":["/*! minireset.css v0.0.6 | MIT License | github.com/jgthms/minireset.css */\nhtml, body, p, ol, ul, li, dl, dt, dd, blockquote, figure, fieldset, legend, textarea, pre, iframe, hr, h1, h2, h3, h4, h5, h6 {margin: 0;\n  padding: 0;\n}\n\nh1, h2, h3, h4, h5, h6 {font-size: 100%;\n  font-weight: normal;\n}\n\nul {\n  list-style: none;\n}\n\nbutton, input, select, textarea {\n  margin: 0;\n}\n\nhtml {\n  box-sizing: border-box;\n}\n\n*, *::before, *::after {\n  box-sizing: inherit;\n}\n\nimg, video {\n  height: auto;\n  max-width: 100%;\n}\n\niframe {\n  border: 0;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n\ntd, th {\n  padding: 0;\n}\n\ntd:not([align]), th:not([align]) {\n  text-align: left;\n}\n","@import '@/assets/styles/index.scss';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.slides {\n  padding: rem(0 0 40px);\n\n  @include mq($from: tablet) {\n    margin: rem(0 calc(-1 * var(--app-margin)));\n    padding: rem(0 0 80px);\n  }\n\n  @include mq($from: wide) {\n    margin: 0\n  }\n\n  &__item {\n    box-sizing: border-box;\n    padding: rem(20px);\n    width: calc(100vw - 80px) !important;\n    height: rem(210px);\n    background-color: var(--white-color);\n    border-radius: rem(4px);\n\n    @include mq($from: tablet) {\n      width: 40% !important;\n    }\n  }\n\n  &__link {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    text-decoration: none;\n    color: var(--text-color);\n  }\n\n  &__title {\n    font-size: rem(20px);\n    line-height: rem(24px);\n    flex-grow: 1;\n\n    @include mq($from: tablet) {\n      font-size: rem(24px);\n      line-height: rem(32px);\n    }\n  }\n\n  &__more {\n    @include sans-serif;\n    font-size: rem(18px);\n    text-transform: lowercase;\n    transition: color .15s;\n  }\n\n  &__link:hover &__more {\n    color: var(--primary-color);\n  }\n\n}\n","$rem-baseline: 16px !default;\n$rem-fallback: false !default;\n$rem-px-only: false !default;\n\n@function rem-separator($list, $separator: false) {\n  @if $separator == \"comma\" or $separator == \"space\" {\n    @return append($list, null, $separator);\n  }\n\n  @if function-exists(\"list-separator\") == true {\n    @return list-separator($list);\n  }\n\n  // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\n  $test-list: ();\n  @each $item in $list {\n    $test-list: append($test-list, $item, space);\n  }\n\n  @return if($test-list == $list, space, comma);\n}\n\n@mixin rem-baseline($zoom: 100%) {\n  font-size: $zoom / 16px * $rem-baseline;\n}\n\n@function rem-convert($to, $values...) {\n  $result: ();\n  $separator: rem-separator($values);\n\n  @each $value in $values {\n    @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\n      $result: append($result, $value / 1rem * $rem-baseline, $separator);\n    } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\n      $result: append($result, $value / $rem-baseline * 1rem, $separator);\n    } @else if type-of($value) == \"list\" {\n      $value-separator: rem-separator($value);\n      $value: rem-convert($to, $value...);\n      $value: rem-separator($value, $value-separator);\n      $result: append($result, $value, $separator);\n    } @else {\n      $result: append($result, $value, $separator);\n    }\n  }\n\n  @return if(length($result) == 1, nth($result, 1), $result);\n}\n\n@function rem($values...) {\n  @if $rem-px-only {\n    @return rem-convert(px, $values...);\n  } @else {\n    @return rem-convert(rem, $values...);\n  }\n}\n\n@mixin rem($properties, $values...) {\n  @if type-of($properties) == \"map\" {\n    @each $property in map-keys($properties) {\n      @include rem($property, map-get($properties, $property));\n    }\n  } @else {\n    @each $property in $properties {\n      @if $rem-fallback or $rem-px-only {\n        #{$property}: rem-convert(px, $values...);\n      }\n      @if not $rem-px-only {\n        #{$property}: rem-convert(rem, $values...);\n      }\n    }\n  }\n}\n","@charset \"UTF-8\"; // Fixes an issue where Ruby locale is not set properly\n                  // See https://github.com/sass-mq/sass-mq/pull/10\n\n/// Base font size on the `<body>` element\n///\n/// Do not override this value, or things will break\n///\n/// @link https://github.com/sass-mq/sass-mq/issues/122\n/// @deprecated This setting will be removed in sass-mq v6.0.0\n/// @access private\n/// @type Number (unit)\n$mq-base-font-size: 16px !default;\n\n/// Responsive mode\n///\n/// Set to `false` to enable support for browsers that do not support @media queries,\n/// (IE <= 8, Firefox <= 3, Opera <= 9)\n///\n/// You could create a stylesheet served exclusively to older browsers,\n/// where @media queries are rasterized\n///\n/// @example scss\n///  // old-ie.scss\n///  $mq-responsive: false;\n///  @import 'main'; // @media queries in this file will be rasterized up to $mq-static-breakpoint\n///                   // larger breakpoints will be ignored\n///\n/// @type Boolean\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-off Disabled responsive mode documentation\n$mq-responsive: true !default;\n\n/// Breakpoint list\n///\n/// Name your breakpoints in a way that creates a ubiquitous language\n/// across team members. It will improve communication between\n/// stakeholders, designers, developers, and testers.\n///\n/// @type Map\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint Full documentation and examples\n$mq-breakpoints: (\n    mobile:  320px,\n    tablet:  740px,\n    desktop: 980px,\n    wide:    1300px\n) !default;\n\n/// Static breakpoint (for fixed-width layouts)\n///\n/// Define the breakpoint from $mq-breakpoints that should\n/// be used as the target width for the fixed-width layout\n/// (i.e. when $mq-responsive is set to 'false') in a old-ie.scss\n///\n/// @example scss\n///  // tablet-only.scss\n///  //\n///  // Ignore all styles above tablet breakpoint,\n///  // and fix the styles (such as the layout) at tablet width\n///  $mq-responsive: false;\n///  $mq-static-breakpoint: tablet;\n///  @import 'main'; // @media queries in this file will be rasterized up to tablet\n///                   // larger breakpoints will be ignored\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#adding-custom-breakpoints Full documentation and examples\n$mq-static-breakpoint: desktop !default;\n\n/// Show breakpoints in the top right corner\n///\n/// If you want to display the currently active breakpoint in the top\n/// right corner of your site during development, add the breakpoints\n/// to this list, ordered by width. For example: (mobile, tablet, desktop).\n///\n/// @example scss\n///   $mq-show-breakpoints: (mobile, tablet, desktop);\n///   @import 'path/to/mq';\n///\n/// @type map\n$mq-show-breakpoints: () !default;\n\n/// Customize the media type (for example: `@media screen` or `@media print`)\n/// By default sass-mq uses an \"all\" media type (`@media all and …`)\n///\n/// @type String\n/// @link https://github.com/sass-mq/sass-mq#changing-media-type Full documentation and examples\n$mq-media-type: all !default;\n\n/// Convert pixels to ems\n///\n/// @param {Number} $px - value to convert\n/// @ignore @param {Number} $base-font-size [$mq-base-font-size] - `<body>` font size (deprecated)\n///\n/// @example scss\n///  $font-size-in-ems: mq-px2em(16px);\n///  p { font-size: mq-px2em(16px); }\n///\n/// @requires $mq-base-font-size\n/// @returns {Number}\n@function mq-px2em($px, $base-font-size: $mq-base-font-size) {\n    @if ($mq-base-font-size != 16px) {\n        @warn \"Overriding $mq-base-font-size will break things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if ($base-font-size != 16px) {\n        @warn \"The $base-font-size argument will be removed in sass-mq v6.0.0, as overriding it breaks things, see https://github.com/sass-mq/sass-mq/issues/122.\";\n    }\n    @if unitless($px) {\n        @warn \"Assuming #{$px} to be in pixels, attempting to convert it into pixels.\";\n        @return mq-px2em($px * 1px, $base-font-size);\n    } @else if unit($px) == em {\n        @return $px;\n    }\n    @return ($px / $base-font-size) * 1em;\n}\n\n/// Get a breakpoint's width\n///\n/// @param {String} $name - Name of the breakpoint. One of $mq-breakpoints\n///\n/// @example scss\n///  $tablet-width: mq-get-breakpoint-width(tablet);\n///  @media (min-width: mq-get-breakpoint-width(desktop)) {}\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @returns {Number} Value in pixels\n@function mq-get-breakpoint-width($name, $breakpoints: $mq-breakpoints) {\n    @if map-has-key($breakpoints, $name) {\n        @return map-get($breakpoints, $name);\n    } @else {\n        @warn \"Breakpoint #{$name} wasn't found in $breakpoints.\";\n    }\n}\n\n/// Media Query mixin\n///\n/// @param {String | Boolean} $from [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $until [false] - One of $mq-breakpoints\n/// @param {String | Boolean} $and [false] - Additional media query parameters\n/// @param {String} $media-type [$mq-media-type] - Media type: screen, print…\n///\n/// @ignore Undocumented API, for advanced use only:\n/// @ignore @param {Map} $breakpoints [$mq-breakpoints]\n/// @ignore @param {String} $static-breakpoint [$mq-static-breakpoint]\n///\n/// @content styling rules, wrapped into a @media query when $responsive is true\n///\n/// @requires {Variable} $mq-media-type\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-static-breakpoint\n/// @requires {function} mq-px2em\n/// @requires {function} mq-get-breakpoint-width\n///\n/// @link https://github.com/sass-mq/sass-mq#responsive-mode-on-default Full documentation and examples\n///\n/// @example scss\n///  .element {\n///    @include mq($from: mobile) {\n///      color: red;\n///    }\n///    @include mq($until: tablet) {\n///      color: blue;\n///    }\n///    @include mq(mobile, tablet) {\n///      color: green;\n///    }\n///    @include mq($from: tablet, $and: '(orientation: landscape)') {\n///      color: teal;\n///    }\n///    @include mq(950px) {\n///      color: hotpink;\n///    }\n///    @include mq(tablet, $media-type: screen) {\n///      color: hotpink;\n///    }\n///    // Advanced use:\n///    $my-breakpoints: (L: 900px, XL: 1200px);\n///    @include mq(L, $breakpoints: $my-breakpoints, $static-breakpoint: L) {\n///      color: hotpink;\n///    }\n///  }\n@mixin mq(\n    $from: false,\n    $until: false,\n    $and: false,\n    $media-type: $mq-media-type,\n    $breakpoints: $mq-breakpoints,\n    $responsive: $mq-responsive,\n    $static-breakpoint: $mq-static-breakpoint\n) {\n    $min-width: 0;\n    $max-width: 0;\n    $media-query: '';\n\n    // From: this breakpoint (inclusive)\n    @if $from {\n        @if type-of($from) == number {\n            $min-width: mq-px2em($from);\n        } @else {\n            $min-width: mq-px2em(mq-get-breakpoint-width($from, $breakpoints));\n        }\n    }\n\n    // Until: that breakpoint (exclusive)\n    @if $until {\n        @if type-of($until) == number {\n            $max-width: mq-px2em($until);\n        } @else {\n            $max-width: mq-px2em(mq-get-breakpoint-width($until, $breakpoints)) - .01em;\n        }\n    }\n\n    // Responsive support is disabled, rasterize the output outside @media blocks\n    // The browser will rely on the cascade itself.\n    @if $responsive == false {\n        $static-breakpoint-width: mq-get-breakpoint-width($static-breakpoint, $breakpoints);\n        $target-width: mq-px2em($static-breakpoint-width);\n\n        // Output only rules that start at or span our target width\n        @if (\n            $and == false\n            and $min-width <= $target-width\n            and (\n                $until == false or $max-width >= $target-width\n            )\n            and $media-type != 'print'\n        ) {\n            @content;\n        }\n    }\n\n    // Responsive support is enabled, output rules inside @media queries\n    @else {\n        @if $min-width != 0 { $media-query: '#{$media-query} and (min-width: #{$min-width})'; }\n        @if $max-width != 0 { $media-query: '#{$media-query} and (max-width: #{$max-width})'; }\n        @if $and            { $media-query: '#{$media-query} and #{$and}'; }\n\n        // Remove unnecessary media query prefix 'all and '\n        @if ($media-type == 'all' and $media-query != '') {\n            $media-type: '';\n            $media-query: str-slice(unquote($media-query), 6);\n        }\n\n        @media #{$media-type + $media-query} {\n            @content;\n        }\n    }\n}\n\n/// Quick sort\n///\n/// @author Sam Richards\n/// @access private\n/// @param {List} $list - List to sort\n/// @returns {List} Sorted List\n@function _mq-quick-sort($list) {\n    $less:  ();\n    $equal: ();\n    $large: ();\n\n    @if length($list) > 1 {\n        $seed: nth($list, ceil(length($list) / 2));\n\n        @each $item in $list {\n            @if ($item == $seed) {\n                $equal: append($equal, $item);\n            } @else if ($item < $seed) {\n                $less: append($less, $item);\n            } @else if ($item > $seed) {\n                $large: append($large, $item);\n            }\n        }\n\n        @return join(join(_mq-quick-sort($less), $equal), _mq-quick-sort($large));\n    }\n\n    @return $list;\n}\n\n/// Sort a map by values (works with numbers only)\n///\n/// @access private\n/// @param {Map} $map - Map to sort\n/// @returns {Map} Map sorted by value\n@function _mq-map-sort-by-value($map) {\n    $map-sorted: ();\n    $map-keys: map-keys($map);\n    $map-values: map-values($map);\n    $map-values-sorted: _mq-quick-sort($map-values);\n\n    // Reorder key/value pairs based on key values\n    @each $value in $map-values-sorted {\n        $index: index($map-values, $value);\n        $key: nth($map-keys, $index);\n        $map-sorted: map-merge($map-sorted, ($key: $value));\n\n        // Unset the value in $map-values to prevent the loop\n        // from finding the same index twice\n        $map-values: set-nth($map-values, $index, 0);\n    }\n\n    @return $map-sorted;\n}\n\n/// Add a breakpoint\n///\n/// @param {String} $name - Name of the breakpoint\n/// @param {Number} $width - Width of the breakpoint\n///\n/// @requires {Variable} $mq-breakpoints\n///\n/// @example scss\n///  @include mq-add-breakpoint(tvscreen, 1920px);\n///  @include mq(tvscreen) {}\n@mixin mq-add-breakpoint($name, $width) {\n    $new-breakpoint: ($name: $width);\n    $mq-breakpoints: map-merge($mq-breakpoints, $new-breakpoint) !global;\n    $mq-breakpoints: _mq-map-sort-by-value($mq-breakpoints) !global;\n}\n\n/// Show the active breakpoint in the top right corner of the viewport\n/// @link https://github.com/sass-mq/sass-mq#seeing-the-currently-active-breakpoint\n///\n/// @param {List} $show-breakpoints [$mq-show-breakpoints] - List of breakpoints to show in the top right corner\n/// @param {Map} $breakpoints [$mq-breakpoints] - Breakpoint names and sizes\n///\n/// @requires {Variable} $mq-breakpoints\n/// @requires {Variable} $mq-show-breakpoints\n///\n/// @example scss\n///  // Show breakpoints using global settings\n///  @include mq-show-breakpoints;\n///\n///  // Show breakpoints using custom settings\n///  @include mq-show-breakpoints((L, XL), (S: 300px, L: 800px, XL: 1200px));\n@mixin mq-show-breakpoints($show-breakpoints: $mq-show-breakpoints, $breakpoints: $mq-breakpoints) {\n    body:before {\n        background-color: #FCF8E3;\n        border-bottom: 1px solid #FBEED5;\n        border-left: 1px solid #FBEED5;\n        color: #C09853;\n        font: small-caption;\n        padding: 3px 6px;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 100;\n\n        // Loop through the breakpoints that should be shown\n        @each $show-breakpoint in $show-breakpoints {\n            $width: mq-get-breakpoint-width($show-breakpoint, $breakpoints);\n            @include mq($show-breakpoint, $breakpoints: $breakpoints) {\n                content: \"#{$show-breakpoint} ≥ #{$width} (#{mq-px2em($width)})\";\n            }\n        }\n    }\n}\n\n@if length($mq-show-breakpoints) > 0 {\n    @include mq-show-breakpoints;\n}\n","@import 'sass-rem';\n@import 'sass-mq';\n@import 'rem';\n@import 'reset';\n@import 'globals';\n@import '~sass-mq/mq';\n@import '~swiper/css/swiper.css';\n\n$mq-breakpoints: (\n  mobile:  320px,\n  mobileLarge: 550px,\n  tablet:  768px,\n  desktop: 980px,\n  wide:    1170px\n);\n\n@mixin sans-serif {\n  font-family: sans-serif;\n\n  .wf-active & {\n    font-family: 'IBM Plex Sans', sans-serif;\n  }\n}\n\n@mixin serif {\n  font-family: serif;\n\n  .wf-active & {\n    font-family: 'IBM Plex Serif', sans-serif;\n  }\n}\n\nhtml {\n  -webkit-text-size-adjust: 100%;\n  -webkit-font-variant-ligatures: none;\n  font-variant-ligatures: none;\n  text-rendering: optimizeLegibility;\n  -moz-osx-font-smoothing: grayscale;\n  -webkit-font-smoothing: antialiased;\n}\n\nbody {\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  @include serif;\n  color: var(--text-color);\n}\n\n#app {\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  min-height: 100vh;\n  background-color: var(--background-color);\n\n  @include mq($from: tablet) {\n    margin: 0 auto;\n    padding: rem(0 var(--app-margin));\n    max-width: var(--max-width);\n  }\n}\n\n.viewport-lock {\n  overflow: hidden;\n}\n\nsvg {\n  display: block;\n  overflow: hidden;\n}\n\n.main {\n  box-sizing: border-box;\n  margin: 0 auto;\n  padding: 0;\n  flex: 1;\n  width: 100%;\n  padding-top: var(--mobie-header-height);\n\n  @include mq($from: tablet) {\n    padding-top: var(--header-height);\n  }\n}\n\ninput,\nbutton,\ntextarea {\n  @include sans-serif;\n  outline: none;\n}\n","@import '@/assets/styles/index.scss';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.posts {\n\n  &__item {\n    transition: all .15s;\n    width: 100%;\n\n    .posts--list & {\n      border-bottom: 1px solid var(--text-color);\n\n      &:first-child {\n        border-top: 1px solid var(--text-color);\n      }\n    }\n\n    .posts--tiles & {\n\n      @include mq($from: mobileLarge) {\n        flex-basis: 50%;\n      }\n\n      @include mq($from: desktop) {\n        flex-basis: 25%;\n      }\n    }\n  }\n\n\n  &__image {\n    display: none;\n\n    .posts--tiles & {\n      display: block;\n      width: 100%;\n      height: auto;\n\n      @include mq($from: mobileLarge) {\n        height: rem(180px);\n      }\n    }\n  }\n\n  &__link {\n    display: block;\n    color: var(--text-color);\n    text-decoration: none;\n\n    .posts--list & {\n      padding: rem(12px 0);\n    }\n\n    .posts--tiles & {\n      display: flex;\n      flex-wrap: wrap;\n      margin: rem(0 0 23px 0);\n      border-radius: rem(2px);\n      background-color: var(--white-color);\n\n      @include mq($from: mobileLarge) {\n        margin: rem(0 23px 23px 0);\n        height: rem(300px);\n      }\n    }\n  }\n\n  &__wrap {\n    box-sizing: border-box;\n    width: 100%;\n    height: calc(100% - 180px);\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    flex-grow: 1;\n\n    .posts--tiles & {\n      overflow: hidden;\n      padding: rem(16px);\n      align-items: flex-start;\n    }\n  }\n\n  &__title {\n    padding: rem(0 20px 0 0);\n    font-size: rem(20px);\n    line-height: rem(24px);\n\n    @include mq($from: tablet) {\n      font-size: rem(24px);\n      line-height: rem(32px);\n    }\n\n    .posts--tiles & {\n      flex-basis: 80%;\n      padding: rem(0 16px 0 0);\n      font-size: rem(18px);\n      line-height: rem(23px);\n    }\n  }\n\n  &__arrow {\n    margin-left: auto;\n    width: rem(24px);\n    height: rem(24px);\n    transition: color .15s;\n\n    .posts--tiles & {\n      align-self: flex-end;\n    }\n  }\n\n  &__link:hover &__arrow {\n    color: var(--primary-color);\n  }\n}\n","@import '@/assets/styles/index.scss';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.posts {\n  padding: rem(0 20px);\n\n  @include mq($from: tablet) {\n    margin: 0 auto;\n    padding: 0;\n    max-width: var(--max-width);\n  }\n\n  &__toggle {\n    padding: rem(0 0 40px);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    &_item {\n      margin: rem(0 4px 0 0);\n      padding: rem(0 16px);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      height: 32px;\n      @include sans-serif;\n      font-size: rem(18px);\n      border: 1px solid rgba(0, 0, 0, 0);\n      border-radius: rem(16px);\n      transition: border-color .15s, color .15s;\n      cursor: pointer;\n\n      &:not(&--active):hover {\n        color: var(--primary-color);\n      }\n\n      &--active {\n        border-color: var(--text-color);\n        cursor: default;\n      }\n    }\n  }\n\n  &__list {\n    display: flex;\n    list-style: none;\n    flex-direction: column;\n\n    .posts--tiles & {\n      flex-direction: row;\n      flex-wrap: wrap;\n\n      @include mq($from: mobileLarge) {\n        margin: rem(0 -23px);\n        padding-left: rem(23px);\n      }\n    }\n  }\n\n  &__more {\n    margin: rem(20px auto 40px);\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    @include mq($from: tablet) {\n      margin: rem(40px auto 80px);\n    }\n\n    &_button {\n      @include sans-serif;\n      font-size: rem(18px);\n      text-transform: lowercase;\n      color: var(--text-color);\n      appearance: none;\n      background: none;\n      border: none;\n      transition: color .15s;\n      cursor: pointer;\n\n      &:hover:not(:disabled) {\n        color: var(--primary-color);\n      }\n\n      &:disabled {\n        cursor: default;\n      }\n    }\n  }\n}\n",":root {\n  --text-color: #333;\n  --text-color-alt: #999;\n  --primary-color: #d0455e;\n  --background-color: #f3f1f0;\n  --white-color: #fff;\n  --mobie-header-height: calc(72px + 15px);\n  --header-height: calc(144px + 24px);\n  --max-width: 1170px;\n  --app-margin: 55px;\n}\n","@import '@/assets/styles/index.scss';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.post {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n\n  &__title {\n    margin: rem(0 0 40px);\n    font-size: rem(24px);\n    line-height: rem(32px);\n  }\n\n  &__body {\n    padding: rem(24px 0 48px);\n    @include sans-serif;\n  }\n\n  &__comments {\n    margin: rem(0 -40px);\n    padding: rem(40px);\n    background-color: var(--background-color);\n\n    &_title {\n      padding: rem(0 0 24px);\n      @include sans-serif;\n      font-size: rem(24px);\n      line-height: rem(28px);\n    }\n\n    &_list {\n      list-style: none;\n    }\n\n    &_item {\n      padding: rem(16px 0);\n      border-bottom: 1px solid var(--text-color);\n\n      &:first-child {\n        border-top: 1px solid var(--text-color);\n      }\n    }\n\n    &_author {\n      padding: rem(0 0 10px);\n      font-size: rem(18px);\n      line-height: rem(24px);\n    }\n\n    &_body {\n      font-size: rem(18px);\n      line-height: rem(24px);\n      color: var(--text-color-alt);\n      @include sans-serif;\n    }\n\n    &_more {\n      margin: rem(20px auto 0);\n      display: flex;\n      align-items: center;\n      justify-content: center;\n\n      &_button {\n        @include sans-serif;\n        font-size: rem(18px);\n        text-transform: lowercase;\n        color: var(--text-color);\n        appearance: none;\n        background: none;\n        border: none;\n        transition: color .15s;\n        cursor: pointer;\n\n        &:hover:not(:disabled) {\n          color: var(--primary-color);\n        }\n\n        &:disabled {\n          cursor: default;\n        }\n\n      }\n    }\n  }\n\n}\n"]}